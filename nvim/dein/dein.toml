[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_sign_added = '+'
  let g:gitgutter_sign_modified = '~'
  let g:gitgutter_sign_removed = '-'
  let g:gitgutter_sign_modified_removed = '~'
'''

[[plugins]] # ステータスライン
repo = 'itchyny/lightline.vim'
hook_add = '''
  set noshowmode
  let g:lightline = {
\    'colorscheme': 'powerline',
\    'active': {
\      'left': [
\        ['mode', 'paste'], ['fugitive'], ['readonly', 'filename', 'modified'],
\      ],
\      'right': [
\        ['lineinfo', 'percent'],
\        ['ale'],
\        ['fileformat', 'fileencoding', 'filetype'],
\      ],
\    },
\    'component_function': {
\      'ale': 'ALEGetStatusLine',
\      'fugitive': 'MyFugitive',
\    },
\    'separator': {'left': "\ue0b0", 'right': "\ue0b2"},
\    'subseparatr': {'left': "\ue0b1", 'right': "\ue0b3"},
\  }
  function! MyFugitive()
    try
      if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#statusline')
        let _ = fugitive#statusline()
        return strlen(_) ? _ : ''
      endif
    catch
    endtry
    return ''
  endfunction
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

# Colors

[[plugins]] # hybrid
repo = 'w0ng/vim-hybrid'

[[plugins]] # solarized
repo = 'altercation/vim-colors-solarized'

[[plugins]] # zenburn
repo = 'jnurmine/Zenburn'

[[plugins]]
repo = 'morhetz/gruvbox'

# Memo
[[plugins]]
repo = 'glidenote/memolist.vim'
hook_add = '''
nnoremap <Leader>mn :MemoNew<CR>
nnoremap <Leader>ml :MemoList<CR>
let g:memolist_denite = 1
function! s:memoGrepDenite()
  let l:option = '-path=' . expand('$HOME/memo')
  exe 'Denite' 'grep' l:option '-highlight-mode-insert=Search'
endfunction

command! MemoGrepDenite call s:memoGrepDenite()<CR>
nnoremap <Leader>mg :MemoGrepDenite<CR>
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
nmap <Leader>c <Plug>(caw:prefix)
vmap <Leader>c <Plug>(caw:prefix)
'''

[[plugins]]
repo = 'junegunn/vim-emoji'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_statusline_format = ['× %d', '⚠ %d', '✓ OK']
let g:ale_linters = {
      \   'javascript': ['eslint'],
      \   'html': ['tidy'],
      \   'c': ['gcc', 'clangtidy', 'clang-format'],
      \   'cpp': ['gcc', 'clangtidy', 'clang-format', 'cppcheck', 'cpplint'],
      \   'haskell': ['stack-ghc-mod', 'hlint', 'stack-ghc'],
      \ }
let g:ale_sign_warning = '⚠'
let g:ale_sign_error = '×'
augroup LightLineOnALE
  autocmd!
  autocmd User ALELint call lightline#update()
augroup END
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets']
hook_add = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_or_jump)

  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1
'''
on_ft = ['snippet']
